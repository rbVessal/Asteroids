package iceteroids {	import com.as3toolkit.ui.Keyboarder;	import flash.ui.Keyboard;	import flash.display.MovieClip;	import flash.geom.Point;		public class Player extends GameElement	{		private var accThrust: Number = 0.3;		private var accTurn: Number = 0.5;		public var up_mc, left_mc, right_mc:MovieClip;		public var bulletManager: BulletManager;		private var fireRate: int = 5;		private var coolDown: int = 0;		public var respawning: Boolean;		public function Player(aGame:Game) 		{			super(aGame);			//player = new Player(this);			bulletManager = new BulletManager(aGame);			respawning = false;					}				public function init(xml:XML):void		{			vx = 0;			vy = 0;			vr = 0;			x = .5 * (stage.stageWidth);			y = .5 * (stage.stageHeight);						//Remember, accessing a node by name returns an XMLList			//which we can index into with [squareBracketNotation] like an Array			accThrust = xml.accThrust[0];			accTurn = xml.turn[0];			fireRate = xml.fireRate[0];						up_mc.visible = false;			left_mc.visible = false;			right_mc.visible = false;		}				//Should be called by the Game class' update()		//checks keys and pushes the ship around accordingly		public function doKeys():void		{			//if the LEFT key is down			if(Keyboarder.keyIsDown(Keyboard.LEFT))			{				//turn left by accTurn				vr += accTurn;			}						//if the UP key is down			if(Keyboarder.keyIsDown(Keyboard.UP))			{				//first, find our rotation expressed in radians				var rotAsRad: Number = rotation * Math.PI/180;								//second, find the x comp of accThrust at our rotation				//and adjust our vx				vx += Math.cos(rotAsRad) * accThrust;								//third, find the y comp of accThrust at our rotation				//and adjust our vy				vy += Math.sin(rotAsRad) * accThrust;			}						coolDown--;			//If the Space key is down			if(coolDown < 0 && Keyboarder.keyIsDown(Keyboard.SPACE))			{				//Define the local coordinates of the Player ship's nose				var point: Point = new Point(16, 0);								//Convert that point to global coordinates				point = this.localToGlobal(point);								//Fire a bullet at that point, with the ships rotation and velocity				//taken into account				if(bulletManager.fireBullet(point, rotation, vx, vy))				{					//If a bullet was acctually fire, set the cooldown countdown					coolDown = fireRate;				}											}		}				public function destroy():void		{			respawning = true;			gotoAndPlay("death");		}				public function deathComplete():void		{			x = Math.random() * stage.stageWidth;			y = Math.random() * stage.stageHeight;			rotation = vx = vy = vr = 0;			gotoAndPlay("respawn");		}				public function respawnComplete():void		{			respawning = false;			gotoAndStop("normal");		}	}	}